// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String
  email              String    @unique
  emailVerified      DateTime?
  passwordHash       String
  role               Role      @default(STUDENT)
  avatar             String?
  ecoScore           Int       @default(0)
  streakCount        Int       @default(0)
  lastActive         DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  badges             BadgeUser[]
  challenges         UserChallenge[]
  projects           Project[]
  submissions        Submission[]
  pledges            Pledge[]
  forumPosts         ForumPost[]
  wasteScans         WasteScan[]
  carbonLogs         CarbonLog[]
  recommendations    Recommendation[]
  refreshTokens      RefreshToken[]
  leaderboardEntries LeaderboardEntry[]
  createdChallenges  Challenge[]     @relation("ChallengeAuthor")
  ownedClassrooms    Classroom[]     @relation("ClassroomTeacher")
  classrooms         ClassroomUser[]
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// -----------------------------
// Authentication
// -----------------------------
model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// -----------------------------
// Gamification
// -----------------------------
model Badge {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  tier        BadgeTier
  icon        String?
  users       BadgeUser[]
}

enum BadgeTier {
  BRONZE
  SILVER
  GOLD
}

model BadgeUser {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model Challenge {
  id           String        @id @default(uuid())
  title        String
  description  String
  type         ChallengeType
  points       Int           @default(10)
  startDate    DateTime?
  endDate      DateTime?
  authorId     String
  author       User          @relation("ChallengeAuthor", fields: [authorId], references: [id])
  participants UserChallenge[]
  assignedInClassrooms ClassroomChallenge[]
}

enum ChallengeType {
  DAILY
  WEEKLY
  QUIZ
  PROJECT
}

model UserChallenge {
  id          String          @id @default(uuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  status      ChallengeStatus @default(PENDING)
  completedAt DateTime?

  @@unique([userId, challengeId])
}

enum ChallengeStatus {
  PENDING
  COMPLETED
  FAILED
}

model Leaderboard {
  id        String            @id @default(uuid())
  name      String
  period    LeaderboardPeriod
  createdAt DateTime          @default(now())
  entries   LeaderboardEntry[]
}

enum LeaderboardPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

model LeaderboardEntry {
  id            String      @id @default(uuid())
  leaderboardId String
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  score         Int         @default(0)

  @@unique([leaderboardId, userId])
}

// -----------------------------
// Learning & Submissions
// -----------------------------
model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submissions Submission[]
}

model Submission {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.VarChar(5000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   status    SubmissionStatus @default(PENDING)
}

// -----------------------------
// Community Features
// -----------------------------
model Pledge {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String   @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForumPost {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -----------------------------
// AI Features
// -----------------------------
model WasteScan {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl   String
  label      WasteType
  confidence Float
  scannedAt  DateTime  @default(now())
}

enum WasteType {
  RECYCLABLE
  BIODEGRADABLE
  NON_RECYCLABLE
}

model CarbonLog {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime  @db.Date
  habitType HabitType
  value     Int
  createdAt DateTime  @default(now())

  @@unique([userId, date, habitType])
}

enum HabitType {
  TRANSPORT
  DIET
  ENERGY
  SHOPPING
  OTHER
}

model Recommendation {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
}

// -----------------------------
// Classroom & School Features
// -----------------------------
model Classroom {
  id        String          @id @default(uuid())
  name      String
  joinCode  String          @unique
  teacherId String
  teacher   User            @relation("ClassroomTeacher", fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  students  ClassroomUser[]
  classRoomChallenges ClassroomChallenge[]
}

model ClassroomUser {
  id          String    @id @default(uuid())
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  studentId   String
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  joinedAt    DateTime  @default(now())

  @@unique([classroomId, studentId])
}
// --- ADD THIS NEW ENUM ---
enum SubmissionStatus {
  PENDING   // Student has submitted, awaiting review
  APPROVED  // Teacher has approved it, points can be awarded
  REJECTED // Teacher has rejected it, student may need to resubmit
}

// --- ADD THIS NEW MODEL (for the many-to-many relation) ---
model ClassroomChallenge {
  id          String    @id @default(uuid())
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  assignedAt  DateTime  @default(now())

  @@unique([classroomId, challengeId]) // A challenge can only be assigned to a class once
}