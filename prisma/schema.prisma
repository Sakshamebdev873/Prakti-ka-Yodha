generator client {
  provider      = "prisma-client-js"
  // previewFeatures = ["accelerate"] // Uncomment if you use Prisma Accelerate
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ------------------------------------
// 1. Core Identity & Authentication
// ------------------------------------
// This is the central model for logging in.
model Account {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  role         Role
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // One-to-one relationships to the specific role profiles.
  // Only one of these will exist for any given account.
  adminProfile      Admin?
  instAdminProfile  InstitutionAdmin?
  teacherProfile    Teacher?
  studentProfile    Student?

  // An account can have many refresh tokens, forum posts, and can send invitations.
  refreshTokens      RefreshToken[]
  forumPosts         ForumPost[]
  sentInvitations    TeacherInvitation[] @relation("InvitationSender")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  INSTITUTION_ADMIN
}

// ------------------------------------
// 2. Role-Specific Profile Models
// ------------------------------------

model Admin {
  id        String @id @default(uuid())
  name      String
  avatar    String?
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model InstitutionAdmin {
  id            String  @id @default(uuid())
  name          String
  avatar        String?
  accountId     String  @unique
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

model Teacher {
  id            String  @id @default(uuid())
  name          String
  avatar        String?
  accountId     String  @unique
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  // Relations specific to Teachers
  ownedClassrooms   Classroom[] @relation("ClassroomTeacher")
  createdChallenges Challenge[] @relation("ChallengeAuthor")
}

model Student {
  id            String    @id @default(uuid())
  name          String
  avatar        String?
  ecoScore      Int       @default(0)
  streakCount   Int       @default(0)
  lastActive    DateTime?
  accountId     String    @unique
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  // Relations specific to Students
  academicProfile    AcademicProfile?
  badges             BadgeUser[]
  challenges         UserChallenge[]
  projects           Project[]
  submissions        Submission[]
  pledges            Pledge[]
  wasteScans         WasteScan[]
  carbonLogs         CarbonLog[]
  recommendations    Recommendation[]
  leaderboardEntries LeaderboardEntry[]
  classrooms         ClassroomUser[]
}

// ------------------------------------
// 3. Institution & Invitation Models
// ------------------------------------
model Institution {
  id                 String               @id @default(uuid())
  name               String               @unique
  type               InstitutionType
  address            String?
  joinCode           String?              @unique
  institutionAdmins  InstitutionAdmin[]
  teachers           Teacher[]
  students           Student[]
  teacherInvitations TeacherInvitation[]
}

enum InstitutionType {
  SCHOOL
  COLLEGE
  UNIVERSITY
  OTHER
}

model TeacherInvitation {
  id                 String           @id @default(uuid())
  email              String
  institutionId      String
  institution        Institution      @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  token              String           @unique
  expiresAt          DateTime
  status             InvitationStatus @default(PENDING)
  createdAt          DateTime         @default(now())
  // CORRECTED RELATION: An invitation is sent by a generic Account (which could be an Admin or InstAdmin)
  invitedByAccountId String
  invitedBy          Account          @relation("InvitationSender", fields: [invitedByAccountId], references: [id])

  @@unique([email, institutionId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model RefreshToken {
  id        String   @id @default(uuid())
  jti       String   @unique
  accountId String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------------
// 4. Gamification, Learning, & Community Models
// ------------------------------------

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  tier        BadgeTier
  icon        String?
  users       BadgeUser[]
}

enum BadgeTier {
  BRONZE
  SILVER
  GOLD
}

model BadgeUser {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedAt DateTime @default(now())
  @@unique([studentId, badgeId])
}

model Challenge {
  id                   String               @id @default(uuid())
  title                String
  description          String
  type                 ChallengeType
  points               Int                  @default(10)
  startDate            DateTime?
  endDate              DateTime?
  authorId             String
  author               Teacher              @relation("ChallengeAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  participants         UserChallenge[]
  assignedInClassrooms ClassroomChallenge[]
}

enum ChallengeType {
  DAILY
  WEEKLY
  QUIZ
  PROJECT
}

model UserChallenge {
  id          String          @id @default(uuid())
  studentId   String
  student     Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  status      ChallengeStatus @default(PENDING)
  completedAt DateTime?
  @@unique([studentId, challengeId])
}

enum ChallengeStatus {
  PENDING
  COMPLETED
  FAILED
}

model Leaderboard {
  id        String             @id @default(uuid())
  name      String
  period    LeaderboardPeriod
  createdAt DateTime           @default(now())
  entries   LeaderboardEntry[]
}

enum LeaderboardPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

model LeaderboardEntry {
  id            String      @id @default(uuid())
  leaderboardId String
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  score         Int         @default(0)
  @@unique([leaderboardId, studentId])
}

model Project {
  id          String       @id @default(uuid())
  title       String
  description String
  studentId   String
  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  submissions Submission[]
}

model Submission {
  id        String           @id @default(uuid())
  projectId String
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  studentId String
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  content   String           @db.VarChar(5000)
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Pledge {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  message   String   @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForumPost {
  id        String   @id @default(uuid())
  authorId  String
  author    Account  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------------
// 5. AI & Tracking Models
// ------------------------------------
model WasteScan {
  id         String    @id @default(uuid())
  studentId  String
  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  imageUrl   String
  label      WasteType
  confidence Float
  scannedAt  DateTime  @default(now())
}

enum WasteType {
  RECYCLABLE
  BIODEGRADABLE
  NON_RECYCLABLE
}

model CarbonLog {
  id        String    @id @default(uuid())
  studentId String
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  date      DateTime  @db.Date
  habitType HabitType
  value     Int
  createdAt DateTime  @default(now())
  @@unique([studentId, date, habitType])
}

enum HabitType {
  TRANSPORT
  DIET
  ENERGY
  SHOPPING
  OTHER
}

model Recommendation {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  message   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
}

// ------------------------------------
// 6. Classroom & Academic Models
// ------------------------------------
model Classroom {
  id                  String               @id @default(uuid())
  name                String
  joinCode            String               @unique
  teacherId           String
  teacher             Teacher              @relation("ClassroomTeacher", fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt           DateTime             @default(now())
  students            ClassroomUser[]
  classRoomChallenges ClassroomChallenge[]
}

model ClassroomUser {
  id          String    @id @default(uuid())
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  joinedAt    DateTime  @default(now())
  @@unique([classroomId, studentId])
}

model ClassroomChallenge {
  id          String    @id @default(uuid())
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  assignedAt  DateTime  @default(now())
  @@unique([classroomId, challengeId])
}

model AcademicProfile {
  id          String   @id @default(uuid())
  studentId   String   @unique
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  branch      String?
  degree      String?
  yearOfStudy Int?
  grade       String?
  section     String?
  updatedAt   DateTime @updatedAt
}